#  Coded by        Date              Advisors            File Type
# ##########    ##########    ########################   #########
# Kyle Davis    07/06/2016    Noam Harel, Remi Patriat   .HX, .AM

# Importing GUI interfaces and functions

from tkinter import *
from tkinter import ttk
from tkinter.filedialog import askdirectory
from os import path
import os, sys

root = Tk()

# Allows the initial root to be recognized as a GUI under tkinter

##################################################

# Getting the input using the function askdirectory

Called_Directory = askdirectory(parent=root, initialdir=r"D:\MyDocs\Documents\Davis, Kyle\CMRR_2016_UMN\Python Files")

    # Allows user to choose folder in the directory -- .am input files are located in folder "Avizo_Amira_amVIMfiles"

print("SELECTED DIRECTORY:\n\n%s" % Called_Directory)
print("------------------------------------------")

# Detecting if file extension is .hx or .am and operating the proper functions 

# For loop that creates the output files
# and checks the beginning of the 
#   filename in the directory for the argument 'Amira_'.

for filename in os.listdir(Called_Directory) :

    if filename.startswith("Amira_") :
        print("\tIgnore file: given name for output file \n")
        print("\t" + filename)
        print();print("------------------------------------------")
        # Ignore any file that starts with "Amira_" because it is an output nomenclature.
        # Only printed when script has already been run and output files have been created

    else :

        if filename.endswith(".hx") :

            print("SELECTED INPUT FILE: \n\n%s" % filename);print()
            print("\tContinue (.hx extension detected)\n")
            print("------------------------------------------")

            CalledDirectory_Filename = Called_Directory + "/" +filename

            print("LOCATION OF SELECTED INPUT: \n\n%s" % CalledDirectory_Filename);print()
            print("------------------------------------------")
        
            AvfileAm_r = open(CalledDirectory_Filename)
            AvdataAm_r = AvfileAm_r.read()
            AvfileAm_r.close()
        
            Output_File = Called_Directory + "/Amira_" +filename

            print("LOCATION OF PRODUCED OUTPUT: \n\n%s" % Output_File);print()
            AvfileAm_w = open(Output_File,"w")
            
            # Describing the locations of each of the input and output to the user

##################################################

        # Rewriting, replacing, and deleting each appropriate 
        #   string for the output for .hx
        # #r = replace, #d = delete

            sed1 = AvdataAm_r.replace("New.labels", "New.Labels") #r 
            sed2 = sed1.replace("Avizo Project 900", "Amira Script") #r
            sed3 = sed2.replace("# AvizoLite", "") #d 
            sed4 = sed3.replace("Generated by", "") #d
            sed5 = sed4.replace("grayScale.am", "grey.am") #r
            sed6 = sed5.replace("labels.am", "") #d
            sed7 = sed6.replace("setAutoAdjustRangeMode 1", "") #d
            sed8 = sed7.replace("setColorbarMinMax", "") #d
            sed9 = sed8.replace("Ortho Slice", "OrthoSlice") #r
            sed10 = sed9.replace("OrthoSlice 2", "OrthoSlice2") #r
            sed11 = sed10.replace("OrthoSlice 3", "OrthoSlice3") #r
            sed12 = sed11.replace("OrthoSlice 4", "OrthoSlice4") #r
            sed13 = sed12.replace("OrthoSlice 5", "OrthoSlice5") #r
            sed14 = sed13.replace("OrthoSlice 6", "OrthoSlice6") #r
            sed15 = sed14.replace("OrthoSlice 7", "OrthoSlice7") #r
            sed16 = sed15.replace("OrthoSlice 8", "OrthoSlice8") #r
            sed17 = sed16.replace("OrthoSlice 9", "OrthoSlice9") #r
            sed18 = sed17.replace("OrthoSlice 10", "OrthoSlice10") #r
            sed19 = sed18.replace("OrthoSlice 11", "OrthoSlice11") #r
            sed20 = sed19.replace("OrthoSlice 12", "OrthoSlice12") #r
            sed21 = sed20.replace("OrthoSlice 13", "OrthoSlice13") #r
            sed22 = sed21.replace("OrthoSlice 14", "OrthoSlice14") #r
            sed23 = sed22.replace("OrthoSlice 15", "OrthoSlice15") #r
            sed24 = sed23.replace("projection disconnect", "") #d
            sed25 = sed24.replace("alpha set", "") #d
            sed26 = sed25.replace("Generate Surface", "SurfaceGen") #r
            sed27 = sed26.replace("smoothingExtent", "") #d
            sed28 = sed27.replace("applyTransformToResult", "") #d
            sed29 = sed28.replace("Surface View", "SurfaceView") #r
            sed30 = sed29.replace("colorFieldMappingType", "") #d
            sed31 = sed30.replace("Surface Cross Contour", "Intersect") #r
            sed32 = sed31.replace("Register Images", "AffineRegistration") #r
            sed33 = sed32.replace("thresholdModelOutsideReference", "") #d
            sed34 = sed33.replace("theObjectPool","") #d

            AvfileAm_w.write(sed34)
            AvfileAm_w.close()
        
            # Overwriting the entire file with the last replacement string (sed34), then closing it

        if filename.endswith(".am") :

            print("SELECTED INPUT FILE: \n\n%s" % filename);print()
            print("\tContinue (.am extension detected)\n")
            print("------------------------------------------")

            CalledDirectory_Filename = Called_Directory + "/" +filename

            print("LOCATION OF SELECTED INPUT: \n\n%s" % CalledDirectory_Filename);print()
            print("------------------------------------------")
        
            AvfileAm_r = open(CalledDirectory_Filename)
            AvdataAm_r = AvfileAm_r.read()
            AvfileAm_r.close()
        
            Output_File = Called_Directory + "/Amira_" +filename

            # When the output is produced, it gives it the prefix 'Amira_' to make it known to the user that it is an output

            print("LOCATION OF PRODUCED OUTPUT: \n\n%s" % Output_File);print()
            AvfileAm_w = open(Output_File,"w")

            sed_am = AvdataAm_r.replace("Avizo", "AmiraMesh") #r
            AvfileAm_w.write(sed_am)
            AvfileAm_w.close()
           
            # Describing the locations of each of the inputs and outputs to the user


        else :
             print("\tNot converted: No Amira extensions detected")
             print("\tIgnore previous line if the rest of the code is run\n")
             print("------------------------------------------")

             # If any other type file is detected, the script tells the user it was not converted

# END 

##################################################